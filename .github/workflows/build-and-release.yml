name: Build and Release

on:
  push:
    tags:
      - 'v*' # Se activarÃ¡ para cualquier tag que comience con 'v'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            asset_name: encriptar-linux
          - os: windows-latest
            asset_name: encriptar-windows.exe
          - os: macos-latest
            asset_name: encriptar-macos

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build with PyInstaller
      run: pyinstaller --onefile encriptar.py

    - name: Rename and zip binary
      run: |
        mv dist/encriptar${{ runner.os == 'Windows' && '.exe' || '' }} dist/${{ matrix.asset_name }}
        cd dist && zip -j ${{ matrix.asset_name }}.zip ${{ matrix.asset_name }}

    - name: Create source archives (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        zip -j encriptar-source.zip encriptar.py requirements.txt
        tar -cvzf encriptar-source.tar.gz encriptar.py requirements.txt

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}.zip
        path: dist/${{ matrix.asset_name }}.zip
        compression-level: 0 # No compression as it's already zipped

    - name: Upload source archives (Linux only)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: source-archives
        path: |
          encriptar-source.zip
          encriptar-source.tar.gz
        compression-level: 0 # No compression as they're already compressed

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get current date
        id: date
        run: echo "DATE=$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_name="Release ${{ github.ref_name }}-${{ steps.date.outputs.DATE }}"
          release_tag="${GITHUB_REF#refs/tags/}"
          release_notes="Automated release for tag $release_tag"
          
          response=$(curl -sSL \
            -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{\"tag_name\": \"$release_tag\",\"name\": \"$release_name\",\"body\": \"$release_notes\",\"draft\": false,\"prerelease\": false}" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/releases")
          
          release_id=$(echo "$response" | jq -r '.id')
          echo "RELEASE_ID=$release_id" >> $GITHUB_ENV
          echo "Release created with ID: $release_id"

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for asset in encriptar-linux.zip/encriptar-linux.zip encriptar-windows.exe.zip/encriptar-windows.exe.zip encriptar-macos.zip/encriptar-macos.zip source-archives/*; do
            asset_name=$(basename "$asset")
            echo "Uploading $asset_name"
            curl -sSL \
              -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$asset" \
              "https://uploads.github.com/repos/$GITHUB_REPOSITORY/releases/${{ env.RELEASE_ID }}/assets?name=$asset_name"
          done
